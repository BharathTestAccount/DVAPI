openapi: 3.0.0
info:
  title: DVAPI
  description: "DVAPI or Damn Vulnerable API is an intentionally vulnerable API created for showcasing the OWASP API Top 10 2023.\nThe OWASP API Top 10 is a list of the top 10 most critical security risks for APIs (Application Programming Interfaces) based on the Open Web Application Security Project (OWASP), a nonprofit organization focused on improving the security of web applications and APIs. The OWASP API Top 10 list is periodically updated to reflect the changing threat landscape and evolving best practices for API security."
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/register:
    post:
      tags:
        - User
      summary: Register
      description: "Register your user in DVAPI"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: 'user'
                password: 'pass'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/login:
    post:
      tags:
        - User
      summary: Login
      description: "Log in to DVAPI by providing your username and password."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: 'user'
                password: 'pass'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/profile:
    get:
      tags:
        - User
      summary: Profile
      description: "Get your account details on this endpoint."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/profileError:
    get:
      tags:
        - User
      summary: Profile Error
      description: "An alternative endpoint for profile. Still in development."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/addNoteWithLink:
    post:
      tags:
        - Notes
      summary: Add Note With Link
      description: "Quickly add your tagline/note from an external source. (Hint: there is a character limit. Be cautious)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                url: https://example.com/note.txt
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/flag/submit:
    post:
      tags:
        - Challenges
      summary: CheckFlags
      description: "Found a flag? Submit it here."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                challengeNo: 1
                flag: flag{fake_flag}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/getChallenges:
    get:
      tags:
        - Challenges
      summary: Challenges
      description: "Endpoint for challenges."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/allChallenges:
    post:
      tags:
        - Challenges
      summary: All Challenges
      description: "Endpoint for all the challenges."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                unreleased: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/scores:
    get:
      tags:
        - Scores
      summary: Scores
      description: "Scoreboard API. Get scores of all users."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/user/username:
    get:
      tags:
        - User
      summary: Get User
      description: "Get details of other user. Used when viewing other user's profile page."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/getNote:
    get:
      tags:
        - Notes
      summary: Get Note
      description: "Get your saved note from here. The developer who worked on this has left the company and we are trying to find someone to maintain this code."
      parameters:
        - name: username
          in: query
          schema:
            type: string
          example: 'user'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/addNote:
    post:
      tags:
        - Notes
      summary: Add Note
      description: "Add your secret note. Maybe a reminder, or anything. Be creative. Only you can read it."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                note: hi new text
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/addTicket:
    post:
      tags:
        - Tickets
      summary: Submit Ticket
      description: "Have issues working on a certain challenge? Worry not. Our admins are there to help. Simply write one ticket with all the issues and queries and we'll get back to you."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                message: 'I need help'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/getTicket:
    post:
      tags:
        - Tickets
      summary: Get Ticket
      description: "Get tickets. Only for administrators."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ticketno: 100001
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/profile/upload:
    post:
      tags:
        - User
      summary: Upload ProfilePic
      description: "Upload your profile pic and look cool."
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /api/getSolves:
    get:
      tags:
        - Challenges
      summary: Get Solves
      description: "API endpoint to get your challenge solve stats."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
        - bearerAuth: []
  /logout:
    get:
      tags:
        - User
      summary: Logout
      description: "Log out. Drink some water and breathe some fresh air."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT